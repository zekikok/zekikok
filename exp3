/*
------------------------------------------------------------------------------------------------------------------------

	Tür (type): Bir değişkenin içerisindeki değerin hangi formatta tutulduğunu ve bellekte ne kadar uzunlukta (byte) yer
	ayrılacağını belirten kavramdır. Go'da genel olarak türler şu şekilde kategorize edilmiştir:
	- Boolean types
	- Numeric types
	- String types
	- Derived types

	Bu kategoriler konular içerisinde ele alınacaktır

------------------------------------------------------------------------------------------------------------------------
*/
/*
------------------------------------------------------------------------------------------------------------------------

    Anahtar Notlar: Go'da bazı durumlar sistemden sisteme değişiklik gösterebilmektedir. Örneğin int türünün uzunluğu
    bazı sistemlerde 4 byte iken, bazı sistemlerde 8 byte olarak ele alınmaktadır. Şüphesiz farklı byte uzunluğunda da
    olabilir. Bu duruma genel olarak "implementation specified/defined/dependent" denilmektedir.

------------------------------------------------------------------------------------------------------------------------
*/

/*
------------------------------------------------------------------------------------------------------------------------

    Sayısal (Numeric) türler şunlardır:

    Tür ismi                    Uzunluğu (byte)
    int8                            1
    uint8                           1
    int16                           2
    uint16                          2
    int32                           4
    uint32                          4
    int64                           8
    uint64                          8
    byte                            1
    rune                            4
    uint                           4/8
    int                            4/8

    float32                         4
    float64                         8
    complex64                       8
    complex128                     16

    bool                            1

    - Sayısal türler (numeric types) genel olarak iki gruba ayrılır: tamsayı türleri (integer/integral types),
    gerçek sayı türleri (real types/floating point types)

    - Tamsayı türleri işaretli (signed) ve işaretsiz (unsigned) olarak ayrı ayrı bulundurulmuştur ve ikiye tümleme formatında
    çalışırlar.

    - Gerçek sayı türleri ise IEEE754 formatını kullanırlar

    - complex64 türü gerçek (real) ve sanal (imaginary) kısımları float32 türünden olan karmaşık sayıyı temsil eder

    - complex128 türü gerçek (real) ve sanal (imaginary) kısımları float64 türünden olan karmaşık sayıyı temsil eder

    - int8, uint8, int16, uint16, int32, uint32, int64, uint64 tamsayı türlerinin uzunlukları sistemden sisteme değişiklik
    göstermez

    - float32, float64, complex64 ve complex128 türlerinin uzunlukları sistemden sistemden sisteme değişmez.

    - byte türü uint8 türünün ayrı bir ismidir (alias)

    - rune türü int32 türünün ayrı bir ismidir (alias)

    - int ve uint türleri sistem sisteme uzunluğu değişebilen (4 byte veya 8 byte) olan tamsayı türleridir.

    - bool türü 1 byte uzunluğunda, true veya false değerlerinden birini alabilen bir türdür.

    - Yukarıdakiler temel standart türlerdir. Diğer standart türler ayrı ele alınacaktır

------------------------------------------------------------------------------------------------------------------------
*/



//****  file, function, block scope 
//****  masking /shadowing  ,  name lookup

package main
import "fmt"

var a int = 10           // Diğer paketlerden  görülmez (File scope)
var Yas int = 20        //  Diğer paketlerden de görülebilir . (degisken adının ilk karakteri (Y) büyük harf olduğu için) 

//    b := 20     ERROR  : Global alanda := kullanılamaz. 

func foo() {
	fmt.Println(" a file scope (a foo da tanımlanmadigi için glabal a geçerli ) a= ", a)
}

func main() {
	var a int = 20
	fmt.Println("func scope (main) a= ", a)

	if true {
		var a int = 30
                var b int = 11
		fmt.Println("block scope   a= ", a)
		fmt.Println("block scope   b= ", b)
	}

	fmt.Println("func scope (main) a= ", a)

	foo()

	fmt.Println("func scope (main) a= ", a)

  //  fmt.Println("b= ", b)   // compile sırasında  error b tanımlanmamış. yukarıda if blogundaki b,  block scope yani sadece o blokta kullanılabilir.

}

/*  ekran çıktısı
func scope (main) a=  20
block scope   a=  30
block scope   b=  11
func scope (main) a=  20
 a file scope (a foo da tanımlanmadigi için glabal a geçerli ) a=  10
func scope (main) a=  20
 
*/


// ***    type conversion ***
package main
import "fmt"
func main() {
	var a int16 = 130
	var b int8
	b = int8(a)
	fmt.Println(b) 

  //  -126 yazar     130 int8 sınırları içinde değildir.
  //  büyük tipten küçük tipe dönüşümde dikkatli olunması gerekir...

// istisna numericten stringe dönüştürme  ascii karakter için geçerli
  n   := 65
  str := string(n)
  fmt.Printf("%v %T", str, str)    // Ekrana  A string yazar.

// sayilari dizgeler dönüştüren metotlar vardır..
// örnek :  strconv paketindeki  strconv.Itoa(12)

 y := strconv.Itoa(n)
 fmt.Printf("%v, %T", y, y)    // ekrana  65, String yazar

}


/*********
    a := 30      // default  a   int
    b := 10.2    //   ""     b   float64  
*/


/*****    Tür dönüşümü
  x := 10
  y :=  4
	fmt.Printf("%v, %v", x, y)
  y,x = x,y
	fmt.Printf("%v, %v", x, y)
 
   a := 10/4
   b := float64(10/4)
   c := 10.0 /4 
	  fmt.Printf("%T, %v", a, a)
	  fmt.Printf("%T, %v", b, b)
  

  x, y :=  15.0 , 3
	  (15.0/3)
	  fmt.Printf("%T, %v", (15.0/3), ) (15.0/3)

/***************
Go teknik ingilizce   %  : remainder operatoru


/*****************
var int x := 10
	fmt.Println(x++)

İfade (expression): Sabitlerden, operatörlerden ve değişkenlerden oluşan dizilimlere denir.

Expression ile Statement arasındaki fark

Statements    print "hello"  , x = 1
Expression    5*5
Expression Statement   print 5*5  

x = 1+3
print x=1+3   ???????????

***  GOda bir satırda bir statement olabilir

Go da   x++ ,  x--    nedir ?????
var int x := 10
	fmt.Println(x++)   // unexpected error

/**** CONSTANTS
const  : compile time sırasında
var    : Runtime      ""

x:=5
const y=x  //    Error   x:=5 runtime da yapilan bir işlem.  const y=x   compile time sırasında x belli değil.. 
o zaman const a  = ??    (?? burada sabit olmalı)

 
/*  Code A
const x int8  = 4
var   y int16 = 10
	fmt.Printf("%T, %v", x, x)
	fmt.Printf("%T, %v", y, y)
	fmt.Printf("%T, %v", x+y, x+y)

/*  Code B
const x = 4
var   y int16 = 10
	fmt.Printf("%T, %v", x, x)
	fmt.Printf("%T, %v", y, y)
	fmt.Printf("%T, %v", x+y, x+y)

Code A ile Code B  yi    Açıkla.  Aradaki fark var mı ? 





